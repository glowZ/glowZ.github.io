<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张同学</title>
  
  <subtitle>记录代码  |  记录生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://linjiaxiaozhang.com/"/>
  <updated>2019-06-02T06:58:41.224Z</updated>
  <id>http://linjiaxiaozhang.com/</id>
  
  <author>
    <name>Jiaxin Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>.NET中委托与lambda表达式的使用</title>
    <link href="http://linjiaxiaozhang.com/2019/06/01/NET%E4%B8%AD%E5%A7%94%E6%89%98%E4%B8%8Elambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://linjiaxiaozhang.com/2019/06/01/NET中委托与lambda表达式的使用/</id>
    <published>2019-06-01T11:25:32.000Z</published>
    <updated>2019-06-02T06:58:41.224Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/文章摘要图/chahua3.jpg"><br><a id="more"></a></p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=496869422&auto=0&height=66"></iframe></p><hr><h2 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h2><p>是一种数据类型，是用来存放方法的。</p><h3 id="为什么要使用委托？"><a href="#为什么要使用委托？" class="headerlink" title="为什么要使用委托？"></a>为什么要使用委托？</h3><p>例：现在运用控制台输出list数据中年龄大于或小于21的姓名，下面为一般写法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> public <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">        </span>&#123;</span><br><span class="line">            public string Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            public int Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">static void Main(string[] args)</span><br><span class="line">        &#123;<span class="comment">//创建数据对象</span></span><br><span class="line">            List&lt;Person&gt; list = <span class="keyword">new</span> List&lt;Person&gt;() &#123;</span><br><span class="line">                <span class="keyword">new</span> Person()&#123; Name=<span class="string">"张三"</span>,Age=<span class="number">20</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> Person()&#123; Name=<span class="string">"李四"</span>,Age=<span class="number">21</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> Person()&#123; Name=<span class="string">"小明"</span>,Age=<span class="number">22</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> Person()&#123; Name=<span class="string">"小红"</span>,Age=<span class="number">23</span>&#125;,</span><br><span class="line">            &#125;;</span><br><span class="line">            List&lt;Person&gt; person = FilterByAge(list,<span class="literal">true</span>,<span class="number">21</span>);</span><br><span class="line">            foreach (<span class="keyword">var</span> item <span class="keyword">in</span> person)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(item.Name);<span class="comment">//输出</span></span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">            Filter(list, p =&gt; p.Name.Contains(<span class="string">"a"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">static</span> List&lt;Person&gt; FilterByAge(List&lt;Person&gt; list,bool opreate,int age)<span class="comment">//具体方法实现</span></span><br><span class="line">        &#123;</span><br><span class="line">        List&lt;Person&gt; newList=<span class="keyword">new</span> List&lt;Person&gt;();</span><br><span class="line">        foreach(<span class="keyword">var</span> item <span class="keyword">in</span> list)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">if</span>(opreate)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">if</span>(item.Age&gt;age)</span><br><span class="line">        &#123;</span><br><span class="line">        newList.Add(item);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">if</span>(item.Age&lt;age)</span><br><span class="line">        &#123;</span><br><span class="line">        newList.Add(item);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newList;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由此可见，上面的方法判断较多且代码可读性较差，下面我们来运用委托实现。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">public delegate bool FilterPerson(Person p);<span class="comment">//新建一个委托，相当于定义了一个方法的模板</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">        </span>&#123;</span><br><span class="line">            public string Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            public int Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">stattic bool FilterByAge(Person p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p.Age&gt;<span class="number">21</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p.Age&gt;<span class="number">21</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> Main(string[] args)</span><br><span class="line">        &#123;<span class="comment">//创建数据对象</span></span><br><span class="line">            List&lt;Person&gt; list = <span class="keyword">new</span> List&lt;Person&gt;() &#123;</span><br><span class="line">                <span class="keyword">new</span> Person()&#123; Name=<span class="string">"张三"</span>,Age=<span class="number">20</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> Person()&#123; Name=<span class="string">"李四"</span>,Age=<span class="number">21</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> Person()&#123; Name=<span class="string">"小明"</span>,Age=<span class="number">22</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> Person()&#123; Name=<span class="string">"小红"</span>,Age=<span class="number">23</span>&#125;,</span><br><span class="line">            &#125;;</span><br><span class="line">            FilterPerson filter=<span class="keyword">new</span> FilterPerson(FilterByAge);</span><br><span class="line">            List&lt;Person&gt; person=Filter(list,filter);</span><br><span class="line">            foreach (<span class="keyword">var</span> item <span class="keyword">in</span> person)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(item.Name);<span class="comment">//输出</span></span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">static</span> List&lt;Person&gt; Filter(List&lt;Person&gt; list,FilterPerson fliter)<span class="comment">//具体方法实现</span></span><br><span class="line">        &#123;</span><br><span class="line">        List&lt;Person&gt; newList=<span class="keyword">new</span> List&lt;Person&gt;();</span><br><span class="line">        foreach(<span class="keyword">var</span> item <span class="keyword">in</span> list)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">if</span>(filiter(item))</span><br><span class="line">        &#123;</span><br><span class="line">        newList.Add(item);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newList;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的代码的写法还是能够继续简化，下面我们用到了lambda表达式来简化代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        public delegate bool FilterPerson(Person p);</span><br><span class="line">         public <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">        </span>&#123;</span><br><span class="line">            public string Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            public int Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;Person&gt; list = <span class="keyword">new</span> List&lt;Person&gt;() &#123;</span><br><span class="line">                <span class="keyword">new</span> Person()&#123; Name=<span class="string">"张三"</span>,Age=<span class="number">20</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> Person()&#123; Name=<span class="string">"李四"</span>,Age=<span class="number">21</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> Person()&#123; Name=<span class="string">"小明"</span>,Age=<span class="number">22</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> Person()&#123; Name=<span class="string">"小红"</span>,Age=<span class="number">23</span>&#125;,</span><br><span class="line">            &#125;;</span><br><span class="line">            List&lt;Person&gt; person= Filter(list, p =&gt; p.Age&gt;<span class="number">21</span>);<span class="comment">//lambda 语法,格式："()=&gt;&#123;&#125;"</span></span><br><span class="line">            foreach (<span class="keyword">var</span> item <span class="keyword">in</span> person)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(item.Name);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">static</span> List&lt;Person&gt; Filter(List&lt;Person&gt; list,FilterPerson filter)</span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;Person&gt; newList = <span class="keyword">new</span> List&lt;Person&gt;();</span><br><span class="line">            foreach (<span class="keyword">var</span> item <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (filter(item))</span><br><span class="line">                &#123;</span><br><span class="line">                    newList.Add(item);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> newList;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>lambda 语法：用来简化声明方法，多个参数时用逗号隔开，当只有一个参数时，大括号可以省略掉，方法体只有一行代码，叫lambda 表达式，大括号可以省略掉，自动将表达式的结果返回。</p><h2 id="泛型委托"><a href="#泛型委托" class="headerlink" title="泛型委托"></a>泛型委托</h2><p>随着业务需求的增多，数据类型也会变得更加多样化，那将意味着需要定义多个委托，这就又造成了代码的重复，这时候我们便用到了泛型委托。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public delegate T AddDelegate&lt;T&gt;(T a,T b);</span><br></pre></td></tr></table></figure></p><p>但是系统早已为我们准备好了三种类型的委托：<br>（1）Action（）没有参数，没有返回值。<br>（2）Action&lt;&gt;,最多传16个参数，没有返回值。<br>（3）Func&lt;&gt;,最后一个类型是返回类型，其余都是输入类型。<br>所以说委托一般是不需要我们定义的，系统所提供的三种委托基本可以适应大多数使用场景。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/文章摘要图/chahua3.jpg&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term=".NET基础" scheme="http://linjiaxiaozhang.com/categories/NET%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="学习" scheme="http://linjiaxiaozhang.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="基础" scheme="http://linjiaxiaozhang.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>.NET总结（常见误区）</title>
    <link href="http://linjiaxiaozhang.com/2019/06/01/NET%E6%80%BB%E7%BB%93%EF%BC%88%E5%B8%B8%E8%A7%81%E8%AF%AF%E5%8C%BA%EF%BC%89/"/>
    <id>http://linjiaxiaozhang.com/2019/06/01/NET总结（常见误区）/</id>
    <published>2019-06-01T11:18:04.000Z</published>
    <updated>2019-06-02T06:58:00.152Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/文章摘要图/chahua2.jpg"><br><a id="more"></a></p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=540042&auto=0&height=66"></iframe></p><hr><h2 id="内存分配模式"><a href="#内存分配模式" class="headerlink" title="内存分配模式"></a>内存分配模式</h2><p>主要分为两种，栈和堆。<br><strong>黄金定律</strong>：引用类型一定分配在堆上，值类型的局部变量存储在栈上，而类的值类型成员存储在堆上。</p><h2 id="思考一"><a href="#思考一" class="headerlink" title="思考一"></a>思考一</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int a=<span class="number">10</span>;</span><br><span class="line">int b=a;</span><br><span class="line">b=<span class="number">20</span>;</span><br><span class="line">a=?;</span><br></pre></td></tr></table></figure><p>很显然，执行完这段代码后a的值并没有被改变，a的值还是10.<br><img src="/images/文章摘要图/shilitu1.png"></p><h2 id="思考二"><a href="#思考二" class="headerlink" title="思考二"></a>思考二</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">public string Name &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">public int Age&#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">Person p=new Person();</span><br><span class="line">p.Name="张三";</span><br><span class="line">p.Age=20;</span><br><span class="line"></span><br><span class="line">Person p1=p;</span><br><span class="line">p1.Name="李四";</span><br><span class="line">p1.Age=21;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(p.Name);</span><br><span class="line">Console.WriteLine(p.Age);</span><br><span class="line">Console.ReadLine();</span><br></pre></td></tr></table></figure><p>这回的输出结果变为了<strong>李四</strong>与<strong>21</strong>。<br><img src="/images/文章摘要图/shilitu2.png"><br>由于Person p1在栈内直接获取了Person p的堆地址，而不是数据，所以在修改Person p1内的数据时，便会根据地址修改堆内的相应数据，从而修改了Person p的数据，所以输出结果会变为变为李四与21。</p><h2 id="未将对象引用到实例"><a href="#未将对象引用到实例" class="headerlink" title="未将对象引用到实例"></a>未将对象引用到实例</h2><p><img src="/images/文章摘要图/shilitu3.png"><br>当栈内A地址为NULL时，便会引发未将对象引用到实例的错误。</p><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><p>值类型（int，double，bool等）占用的空间在方法执行结束会被马上释放，引用类型（string，数组，class等）占用的空间在方法执行结束后不会被马上释放，具体什么时间释放由垃圾回收器（GC）来决定。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/文章摘要图/chahua2.jpg&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term=".NET基础" scheme="http://linjiaxiaozhang.com/categories/NET%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="学习" scheme="http://linjiaxiaozhang.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="基础" scheme="http://linjiaxiaozhang.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
