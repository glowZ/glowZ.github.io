<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[.NET中委托与lambda表达式的使用]]></title>
    <url>%2F2019%2F06%2F01%2FNET%E4%B8%AD%E5%A7%94%E6%89%98%E4%B8%8Elambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[委托是一种数据类型，是用来存放方法的。 为什么要使用委托？例：现在运用控制台输出list数据中年龄大于或小于21的姓名，下面为一般写法。12345678910111213141516171819202122232425262728293031323334353637383940414243444546class Program&#123; public class Person &#123; public string Name &#123; get; set; &#125; public int Age &#123; get; set; &#125; &#125; static void Main(string[] args) &#123; //创建数据对象 List&lt;Person&gt; list = new List&lt;Person&gt;() &#123; new Person()&#123; Name="张三",Age=20&#125;, new Person()&#123; Name="李四",Age=21&#125;, new Person()&#123; Name="小明",Age=22&#125;, new Person()&#123; Name="小红",Age=23&#125;, &#125;; List&lt;Person&gt; person = FilterByAge(list,true,21); foreach (var item in person) &#123; Console.WriteLine(item.Name);//输出 &#125; Console.ReadLine(); Filter(list, p =&gt; p.Name.Contains("a")); &#125; static List&lt;Person&gt; FilterByAge(List&lt;Person&gt; list,bool opreate,int age)//具体方法实现 &#123; List&lt;Person&gt; newList=new List&lt;Person&gt;(); foreach(var item in list) &#123; if(opreate) &#123; if(item.Age&gt;age) &#123; newList.Add(item); &#125; &#125; else &#123; if(item.Age&lt;age) &#123; newList.Add(item); &#125; &#125; &#125; return newList; &#125;&#125; 由此可见，上面的方法判断较多且代码可读性较差，下面我们来运用委托实现。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748class Program&#123; public delegate bool FilterPerson(Person p);//新建一个委托，相当于定义了一个方法的模板 public class Person &#123; public string Name &#123; get; set; &#125; public int Age &#123; get; set; &#125; &#125; stattic bool FilterByAge(Person p) &#123; if(p.Age&gt;21) &#123; if(p.Age&gt;21) &#123; return true; &#125; return false &#125; &#125; static void Main(string[] args) &#123; //创建数据对象 List&lt;Person&gt; list = new List&lt;Person&gt;() &#123; new Person()&#123; Name="张三",Age=20&#125;, new Person()&#123; Name="李四",Age=21&#125;, new Person()&#123; Name="小明",Age=22&#125;, new Person()&#123; Name="小红",Age=23&#125;, &#125;; FilterPerson filter=new FilterPerson(FilterByAge); List&lt;Person&gt; person=Filter(list,filter); foreach (var item in person) &#123; Console.WriteLine(item.Name);//输出 &#125; Console.ReadLine(); &#125; static List&lt;Person&gt; Filter(List&lt;Person&gt; list,FilterPerson fliter)//具体方法实现 &#123; List&lt;Person&gt; newList=new List&lt;Person&gt;(); foreach(var item in list) &#123; if(filiter(item)) &#123; newList.Add(item); &#125; &#125; return newList; &#125;&#125; 上面的代码的写法还是能够继续简化，下面我们用到了lambda表达式来简化代码：1234567891011121314151617181920212223242526272829303132333435363738class Program &#123; public delegate bool FilterPerson(Person p); public class Person &#123; public string Name &#123; get; set; &#125; public int Age &#123; get; set; &#125; &#125; static void Main(string[] args) &#123; List&lt;Person&gt; list = new List&lt;Person&gt;() &#123; new Person()&#123; Name="张三",Age=20&#125;, new Person()&#123; Name="李四",Age=21&#125;, new Person()&#123; Name="小明",Age=22&#125;, new Person()&#123; Name="小红",Age=23&#125;, &#125;; List&lt;Person&gt; person= Filter(list, p =&gt; p.Age&gt;21);//lambda 语法,格式："()=&gt;&#123;&#125;" foreach (var item in person) &#123; Console.WriteLine(item.Name); &#125; Console.ReadLine(); &#125; static List&lt;Person&gt; Filter(List&lt;Person&gt; list,FilterPerson filter) &#123; List&lt;Person&gt; newList = new List&lt;Person&gt;(); foreach (var item in list) &#123; if (filter(item)) &#123; newList.Add(item); &#125; &#125; return newList; &#125; &#125; lambda 语法：用来简化声明方法，多个参数时用逗号隔开，当只有一个参数时，大括号可以省略掉，方法体只有一行代码，叫lambda 表达式，大括号可以省略掉，自动将表达式的结果返回。 泛型委托随着业务需求的增多，数据类型也会变得更加多样化，那将意味着需要定义多个委托，这就又造成了代码的重复，这时候我们便用到了泛型委托。1public delegate T AddDelegate&lt;T&gt;(T a,T b); 但是系统早已为我们准备好了三种类型的委托：（1）Action（）没有参数，没有返回值。（2）Action&lt;&gt;,最多传16个参数，没有返回值。（3）Func&lt;&gt;,最后一个类型是返回类型，其余都是输入类型。所以说委托一般是不需要我们定义的，系统所提供的三种委托基本可以适应大多数使用场景。]]></content>
      <categories>
        <category>.NET基础</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[.NET总结（常见误区）]]></title>
    <url>%2F2019%2F06%2F01%2FNET%E6%80%BB%E7%BB%93%EF%BC%88%E5%B8%B8%E8%A7%81%E8%AF%AF%E5%8C%BA%EF%BC%89%2F</url>
    <content type="text"><![CDATA[内存分配模式主要分为两种，栈和堆。黄金定律：引用类型一定分配在堆上，值类型的局部变量存储在栈上，而类的值类型成员存储在堆上。 思考一1234int a=10;int b=a;b=20;a=?; 很显然，执行完这段代码后a的值并没有被改变，a的值还是10. 思考二12345678910111213141516class Person&#123; public string Name &#123;get;set;&#125; public int Age&#123;get;set;&#125;&#125;Person p=new Person();p.Name="张三";p.Age=20;Person p1=p;p1.Name="李四";p1.Age=21;Console.WriteLine(p.Name);Console.WriteLine(p.Age);Console.ReadLine(); 这回的输出结果变为了李四与21。由于Person p1在栈内直接获取了Person p的堆地址，而不是数据，所以在修改Person p1内的数据时，便会根据地址修改堆内的相应数据，从而修改了Person p的数据，所以输出结果会变为变为李四与21。 未将对象引用到实例当栈内A地址为NULL时，便会引发未将对象引用到实例的错误。 垃圾回收值类型（int，double，bool等）占用的空间在方法执行结束会被马上释放，引用类型（string，数组，class等）占用的空间在方法执行结束后不会被马上释放，具体什么时间释放由垃圾回收器（GC）来决定。]]></content>
      <categories>
        <category>.NET基础</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue学习笔记]]></title>
    <url>%2F2019%2F06%2F01%2FVue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[准备工作 安装node.js 安装 cnpm：npm install -g cnpm --registry=https://registry.npm.taobao.org 安装vue 的命令行工具：npm install --global vue-cli 创建项目：vue init webpack-simple v1 用vscode打开项目，打开命令窗口 安装项目依赖项：cnpm install 运行项目：npm run dev数据绑定、渲染（1）所有的内容要被一个根节点包起来。12345&lt;template&gt; &lt;div&gt; &lt;/div&gt;&lt;/template&gt; （2）data中定义数据（变量）12345data() &#123; return &#123; list: [] &#125;; &#125;, （3）渲染单个变量、数组和数据的绑定 绑定属性v-bind:属性名=&quot;变量名&quot;，v-bind可以省略掉。 双向数据绑定属性v-model配合input控件使用。 绑定时间v-on:click可以简写成@click. $event:事件对象可以获取键盘的属性1234567891011121314151617181920212223242526&lt;template&gt; &lt;div&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;//用两个大括号包起来渲染单个变量 &lt;div&gt; &lt;ul&gt; &lt;li v-for="(item,index) in list" :key="index"&gt;//运用v-for方法来渲染数组 &#123;&#123;item&#125;&#125; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; props: &#123;&#125;, data() &#123; return &#123; name='xxx' list=['张三','李四'] &#125;; &#125;, methods: &#123;&#125;, components: &#123;&#125;, mounted() &#123;&#125;&#125;;&lt;/script&gt;&lt;style scoped lang="scss"&gt;&lt;/style&gt; (4) localstorage本地存储实例js文件123456789101112var storage = &#123; set(key, value) &#123; localStorage.setItem(key, JSON.stringify(value))//根据key值添加数据 &#125;, get(key) &#123; return JSON.parse(localStorage.getItem(key))//根据key值获取数据 &#125;, del(key) &#123; localStorage.removeItem(key)//根据key值删除数据 &#125;&#125;export &#123; storage &#125; vue文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;template&gt; &lt;div&gt; &lt;div&gt;未完成列表&lt;/div&gt; &lt;input type="text" v-model="name" @keyup="addName($event)"&gt; &lt;ul&gt; &lt;li v-for="(item,index) in nameList" :key="index" v-if="!item.done"&gt; &lt;input type="checkbox" v-model="item.done" @change="doneTask()"&gt; &#123;&#123;item.name&#125;&#125; &lt;button @click="deleteName(index)"&gt;删除&lt;/button&gt; &lt;/li&gt; &lt;/ul&gt; &lt;div&gt;已完成列表&lt;/div&gt; &lt;ul&gt; &lt;li v-for="(item,index) in nameList" :key="index" v-if="item.done"&gt; &lt;input type="checkbox" v-model="item.done" @change="doneTask()"&gt; &#123;&#123;item.name&#125;&#125; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123; storage &#125; from "./common/storage";export default &#123; data() &#123; return &#123; name: "", nameList: [] &#125;; &#125;, methods: &#123; addName(e) &#123; if (e.keyCode == "13") &#123; this.nameList.push(&#123; name: this.name, done: false &#125;); storage.set("nameList", this.nameList); &#125; &#125;, deleteName(index) &#123; this.nameList.splice(index, 1); storage.set("nameList", this.nameList); &#125;, doneTask() &#123; storage.set("nameList", this.nameList); &#125; &#125;, mounted() &#123; if (storage.get("nameList") != null) &#123; this.nameList = storage.get("nameList"); &#125; &#125;&#125;;&lt;/script&gt;&lt;style&gt;&lt;/style&gt; 组件 作用：封装成可重用的代码，相同的功能封装成组件。App.vue是根组件，一般不对跟组件做操作。 一个vue页面是由各种组件构成的，组件之间呈树状结构，又称组件树，如下图所示： 组件三要素：模板、脚本（业务逻辑）、样式。 组件的三步走：引用（import），注册（compoments），使用。 组件声明周期函数，当组件挂载、更新、销毁时触发的函数。参考：https://cn.vuejs.org/v2/guide/instance.html路由作用：动态挂载组件。参考官网：https://router.vuejs.org/zh/ 安装 cnpm install vue-router --save 在main.js·文件中引入并使用 12import VueRouter from 'vue-router'Vue.use(VueRouter) 定义路由 1234const routes=&#123; &#123;path:'/foo',component:Foo&#125;, &#123;path:'/bar',component:Bar&#125;,&#125; 创建router实例，然后给roytes配置 1234const router = new VueRouter(&#123; mode: 'history', routes&#125;) 创建和挂载根实例 12345new Vue(&#123; router, el: '#app', render: h =&gt; h(App)&#125;) 请求数据 npm install axios --save 使用axios请求数据，参考：https://github.com/axios/axios,哪里使用哪里引用。实例router.js文件12345678910111213141516171819202122232425262728293031import VueRouter from 'vue-router'import Vue from 'vue'import Home from '../compomons/Home'import College from '../compomons/College'import Major from '../compomons/Major'Vue.use(VueRouter)const routes = [ &#123; path: '/', redirect: '/home/college' &#125;, &#123; path: '/home', component: Home, children: [ &#123; path: 'college', component: College, &#125;, &#123; path: 'major', component: Major, &#125; ] &#125;]const router = new VueRouter(&#123; mode: 'history', routes&#125;)export &#123;router&#125; Colloge.vue1234567891011121314151617181920212223242526272829303132333435363738&lt;template&gt; &lt;div&gt; &lt;div&gt;学校列表&lt;/div&gt; &lt;div&gt; &lt;ul&gt; &lt;li v-for="(item,index) in list" :key="index"&gt; &lt;router-link :to="'/home/major?collegeId='+item.id"&gt;&#123;&#123;item.name&#125;&#125;&lt;/router-link&gt; &lt;button @click="toMajor(item.id)"&gt;&#123;&#123;item.name&#125;&#125;&lt;/button&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import axios from "axios";export default &#123; props: &#123;&#125;, data() &#123; return &#123; list: [] &#125;; &#125;, methods: &#123; toMajor(id)&#123; this.$router.push(`/home/major?collegeId=$&#123;id&#125;`) &#125; &#125;, components: &#123;&#125;, mounted() &#123; const url = "http://39.98.205.17:9000/api-task/college/findAll"; axios.get(url).then((response) =&gt; &#123; this.list = response.data.data &#125;); &#125;&#125;;&lt;/script&gt;&lt;style scoped lang="scss"&gt;&lt;/style&gt; Header.vue123456789101112131415161718192021222324&lt;template&gt; &lt;div class="head"&gt; 学生后台管理系统 &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; props: &#123;&#125;, data() &#123; return &#123;&#125;; &#125;, methods: &#123;&#125;, components: &#123;&#125;, mounted() &#123;&#125;&#125;;&lt;/script&gt;&lt;style scoped lang="scss"&gt;.head&#123; background-color: bisque; height: 40px; line-height: 40px; padding-left: 20px;&#125;&lt;/style&gt; Home.vue12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;template&gt; &lt;div&gt; &lt;v-header&gt;&lt;/v-header&gt; &lt;div&gt; &lt;div class="menu"&gt; &lt;v-menu&gt;&lt;/v-menu&gt; &lt;/div&gt; &lt;div class="content"&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Header from './Header'import Menu from './Menu'export default &#123; props: &#123; &#125;, data() &#123; return &#123; &#125;; &#125;, methods: &#123; &#125;, components: &#123; 'v-header':Header, 'v-menu':Menu &#125;, mounted() &#123; &#125;&#125;;&lt;/script&gt;&lt;style scoped lang="scss"&gt;.menu&#123; float: left; height: 700px; widows: 150px; border: 1px solid brown;&#125;.content&#123; float: left; height: 750px; border: 1px solid cornflowerblue;&#125;&lt;/style&gt; Major.vue12345678910111213141516171819202122232425262728293031323334&lt;template&gt; &lt;div&gt; &lt;div&gt; &lt;ul&gt; &lt;li v-for="(item,index) in list" :key="index"&gt; &#123;&#123;item.name&#125;&#125; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import axios from "axios";export default &#123; props: &#123;&#125;, data() &#123; return &#123; list: [] &#125;; &#125;, methods: &#123;&#125;, components: &#123;&#125;, mounted() &#123; const collegeId=this.$route.query.collegeId const url = `http://39.98.205.17:9000/api-task/major/findByCollegeId?collegeId=$&#123;collegeId&#125;`; axios.get(url).then((response) =&gt; &#123; this.list = response.data.data &#125;); &#125;&#125;;&lt;/script&gt;&lt;style scoped lang="scss"&gt;&lt;/style&gt; Menu.vue1234567891011121314151617181920212223&lt;template&gt; &lt;div&gt; &lt;div&gt; &lt;router-link to="/home/college"&gt;大学管理&lt;/router-link&gt; &lt;/div&gt; &lt;div&gt; &lt;router-link to="/home/major"&gt;专业管理&lt;/router-link&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; props: &#123;&#125;, data() &#123; return &#123;&#125;; &#125;, methods: &#123;&#125;, components: &#123;&#125;, mounted() &#123;&#125;&#125;;&lt;/script&gt;&lt;style scoped lang="scss"&gt;&lt;/style&gt; 根组件放置：&lt;router-view&gt;&lt;/router-view&gt;]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>基础</tag>
      </tags>
  </entry>
</search>
